package com.hellocorp.example.iam.test.dao;

import com.hellocorp.example.iam.IamApplication;
import com.hellocorp.example.iam.infra.persist.bk.UserRoleRelBK;
import com.hellocorp.example.iam.infra.persist.dao.UserRoleRelDAO;
import com.hellocorp.example.iam.infra.persist.dataobject.UserRoleRelDO;
import com.hellocorp.example.iam.infra.persist.query.UserRoleRelOffsetQuery;
import com.hellocorp.example.iam.infra.persist.query.UserRoleRelPageNumQuery;
import jakarta.annotation.Resource;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * auto generated by erplant.
 */
@SpringBootTest(
        classes = IamApplication.class
)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class UserRoleRelDaoTest {
    @Resource
    private UserRoleRelDAO userRoleRelDAO;

    private final Long uid = 92L;

    private final Long roleId = 99L;

    private final String bizType = "hgd";

    private final String bizId = "hbi";

    @Test
    @Order(1)
    public void testInsert() {
        UserRoleRelDO userRoleRelDO = new UserRoleRelDO();
        userRoleRelDO.setRoleId(roleId);
        userRoleRelDO.setBizId(bizId);
        userRoleRelDO.setUid(92L);
        userRoleRelDO.setBizType("hgd");
        int affectRow = userRoleRelDAO.insert(userRoleRelDO);
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(2)
    public void testGet() {
        UserRoleRelDO userRoleRelDO = userRoleRelDAO.getByBk(new UserRoleRelBK(bizType, bizId, roleId, uid));
        Assertions.assertNotNull(userRoleRelDO);
    }

    @Test
    @Order(2)
    public void testGetByBk() {
        UserRoleRelDO userRoleRelDO = userRoleRelDAO.getByBk(new UserRoleRelBK(bizType, bizId, roleId, uid));
        Assertions.assertNotNull(userRoleRelDO);
    }

    @Test
    @Order(2)
    public void testPageNumQuery() {
        UserRoleRelPageNumQuery query = UserRoleRelPageNumQuery.builder().bizType(bizType).bizId(bizId).roleId(roleId).uid(uid).build();
        List<UserRoleRelDO> list = userRoleRelDAO.pageNumQuery(query);
        Assertions.assertFalse(list.isEmpty());
    }

    @Test
    @Order(2)
    public void testOffsetQuery() {
        UserRoleRelOffsetQuery query = UserRoleRelOffsetQuery.builder().bizType(bizType).bizId(bizId).roleId(roleId).uid(uid).build();
        List<UserRoleRelDO> list = userRoleRelDAO.offsetQuery(query);
        Assertions.assertFalse(list.isEmpty());
    }

    @Test
    @Order(2)
    public void testCount() {
        UserRoleRelPageNumQuery query = UserRoleRelPageNumQuery.builder().bizType(bizType).bizId(bizId).roleId(roleId).uid(uid).build();
        int count = userRoleRelDAO.count(query);
        Assertions.assertTrue(count > 0);
    }

    @Test
    @Order(3)
    public void testUpdate() {
        UserRoleRelDO userRoleRelDO = userRoleRelDAO.getByBk(new UserRoleRelBK(bizType, bizId, roleId, uid));
        userRoleRelDO.setRoleId(roleId);
        userRoleRelDO.setBizId(bizId);
        userRoleRelDO.setUid(92L);
        userRoleRelDO.setBizType("hgd");
        int affectRow = userRoleRelDAO.update(userRoleRelDO);
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(4)
    public void testDelete() {
        UserRoleRelDO userRoleRelDO = userRoleRelDAO.getByBk(new UserRoleRelBK(bizType, bizId, roleId, uid));
        int affectRow = userRoleRelDAO.delete(userRoleRelDO.getId());
        Assertions.assertTrue(affectRow > 0);
    }
}
