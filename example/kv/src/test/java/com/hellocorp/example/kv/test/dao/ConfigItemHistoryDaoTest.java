package com.hellocorp.example.kv.test.dao;

import com.hellocorp.example.kv.KvApplication;
import com.hellocorp.example.kv.infra.persist.bk.ConfigItemHistoryBK;
import com.hellocorp.example.kv.infra.persist.dao.ConfigItemHistoryDAO;
import com.hellocorp.example.kv.infra.persist.dataobject.ConfigItemHistoryDO;
import com.hellocorp.example.kv.infra.persist.query.ConfigItemHistoryOffsetQuery;
import com.hellocorp.example.kv.infra.persist.query.ConfigItemHistoryPageNumQuery;
import jakarta.annotation.Resource;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * auto generated by erplant.
 */
@SpringBootTest(
        classes = KvApplication.class
)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class ConfigItemHistoryDaoTest {
    @Resource
    private ConfigItemHistoryDAO configItemHistoryDAO;

    private final Long itemId = 2L;

    private final Integer itemVersion = 7;

    @Test
    @Order(1)
    public void testInsert() {
        ConfigItemHistoryDO configItemHistoryDO = new ConfigItemHistoryDO();
        configItemHistoryDO.setItemId(itemId);
        configItemHistoryDO.setItemVersion(itemVersion);
        int affectRow = configItemHistoryDAO.insert(configItemHistoryDO);
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(2)
    public void testGet() {
        ConfigItemHistoryDO configItemHistoryDO = configItemHistoryDAO.getByBk(new ConfigItemHistoryBK(itemId, itemVersion));
        Assertions.assertNotNull(configItemHistoryDO);
    }

    @Test
    @Order(2)
    public void testGetByBk() {
        ConfigItemHistoryDO configItemHistoryDO = configItemHistoryDAO.getByBk(new ConfigItemHistoryBK(itemId, itemVersion));
        Assertions.assertNotNull(configItemHistoryDO);
    }

    @Test
    @Order(2)
    public void testPageNumQuery() {
        ConfigItemHistoryPageNumQuery query = ConfigItemHistoryPageNumQuery.builder().itemId(itemId).build();
        List<ConfigItemHistoryDO> list = configItemHistoryDAO.pageNumQuery(query);
        Assertions.assertFalse(list.isEmpty());
    }

    @Test
    @Order(2)
    public void testOffsetQuery() {
        ConfigItemHistoryOffsetQuery query = ConfigItemHistoryOffsetQuery.builder().itemId(itemId).build();
        List<ConfigItemHistoryDO> list = configItemHistoryDAO.offsetQuery(query);
        Assertions.assertFalse(list.isEmpty());
    }

    @Test
    @Order(2)
    public void testCount() {
        ConfigItemHistoryPageNumQuery query = ConfigItemHistoryPageNumQuery.builder().itemId(itemId).build();
        int count = configItemHistoryDAO.count(query);
        Assertions.assertTrue(count > 0);
    }

    @Test
    @Order(3)
    public void testUpdate() {
        ConfigItemHistoryDO configItemHistoryDO = configItemHistoryDAO.getByBk(new ConfigItemHistoryBK(itemId, itemVersion));
        configItemHistoryDO.setItemId(itemId);
        configItemHistoryDO.setItemVersion(itemVersion);
        int affectRow = configItemHistoryDAO.update(configItemHistoryDO);
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(4)
    public void testDelete() {
        ConfigItemHistoryDO configItemHistoryDO = configItemHistoryDAO.getByBk(new ConfigItemHistoryBK(itemId, itemVersion));
        int affectRow = configItemHistoryDAO.delete(configItemHistoryDO.getId());
        Assertions.assertTrue(affectRow > 0);
    }
}
