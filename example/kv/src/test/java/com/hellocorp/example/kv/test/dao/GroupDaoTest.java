package com.hellocorp.example.kv.test.dao;

import com.hellocorp.example.kv.KvApplication;
import com.hellocorp.example.kv.infra.persist.bk.GroupBK;
import com.hellocorp.example.kv.infra.persist.dao.GroupDAO;
import com.hellocorp.example.kv.infra.persist.dataobject.GroupDO;
import com.hellocorp.example.kv.infra.persist.query.GroupOffsetQuery;
import com.hellocorp.example.kv.infra.persist.query.GroupPageNumQuery;
import jakarta.annotation.Resource;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * auto generated by erplant.
 */
@SpringBootTest(
        classes = KvApplication.class
)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class GroupDaoTest {
    @Resource
    private GroupDAO groupDAO;

    private final String groupName = "eig";

    private final String appName = "faa";

    @Test
    @Order(1)
    public void testInsert() {
        GroupDO groupDO = new GroupDO();
        groupDO.setGroupName(groupName);
        groupDO.setAppName(appName);
        int affectRow = groupDAO.insert(groupDO);
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(2)
    public void testGet() {
        GroupDO groupDO = groupDAO.getByBk(new GroupBK(appName, groupName));
        Assertions.assertNotNull(groupDO);
    }

    @Test
    @Order(2)
    public void testGetByBk() {
        GroupDO groupDO = groupDAO.getByBk(new GroupBK(appName, groupName));
        Assertions.assertNotNull(groupDO);
    }

    @Test
    @Order(2)
    public void testPageNumQuery() {
        GroupPageNumQuery query = GroupPageNumQuery.builder().appName(appName).build();
        List<GroupDO> list = groupDAO.pageNumQuery(query);
        Assertions.assertFalse(list.isEmpty());
    }

    @Test
    @Order(2)
    public void testOffsetQuery() {
        GroupOffsetQuery query = GroupOffsetQuery.builder().appName(appName).build();
        List<GroupDO> list = groupDAO.offsetQuery(query);
        Assertions.assertFalse(list.isEmpty());
    }

    @Test
    @Order(2)
    public void testCount() {
        GroupPageNumQuery query = GroupPageNumQuery.builder().appName(appName).build();
        int count = groupDAO.count(query);
        Assertions.assertTrue(count > 0);
    }

    @Test
    @Order(3)
    public void testUpdate() {
        GroupDO groupDO = groupDAO.getByBk(new GroupBK(appName, groupName));
        groupDO.setGroupName(groupName);
        groupDO.setAppName(appName);
        int affectRow = groupDAO.update(groupDO);
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(4)
    public void testDelete() {
        GroupDO groupDO = groupDAO.getByBk(new GroupBK(appName, groupName));
        int affectRow = groupDAO.delete(groupDO.getId());
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(2)
    public void testBatchGet() {
        GroupDO groupDO = groupDAO.getByBk(new GroupBK(appName, groupName));
        List<GroupDO> list = groupDAO.batchGet(List.of(groupDO.getId()));
        Assertions.assertFalse(list.isEmpty());
    }
}
