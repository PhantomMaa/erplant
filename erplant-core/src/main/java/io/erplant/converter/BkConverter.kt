package io.erplant.converter

import com.squareup.javapoet.ClassName
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.TypeSpec
import io.erplant.*
import javax.lang.model.element.Modifier

class BkConverter(packageName: String, val render: BaseRender, tableConfigMap: Map<String, TableConfig>) :
    JavaPoetConverter(packageName, tableConfigMap) {

    override fun getSupportType(): SupportType {
        return SupportType.BK
    }

    override fun convertTable(databaseName: String, table: Table): FileContent {
        val fileName = super.getOutFileName(table.doName)
        val tableInfo = TableInfo(packageName, databaseName, table, render)
        val bkFields = table.getBkColumns()?.map { columnToFieldSpec(it) }

        val javaDocAuthor = "auto generated by erplant."
        val classBuilder = TypeSpec.classBuilder(tableInfo.bKClassName)
        classBuilder.addJavadoc(javaDocAuthor)
            .addAnnotation(ClassName.get("lombok", "Data"))
            .addSuperinterface(ClassName.get("com.hellocorp.automq.ddd", "Identifier"))
            .addModifiers(Modifier.PUBLIC)

        if (bkFields != null) {
            classBuilder.addAnnotation(ClassName.get("lombok", "NoArgsConstructor"))
                .addAnnotation(ClassName.get("lombok", "AllArgsConstructor"))
                .addFields(bkFields)
        }

        val typeSpec = classBuilder.build()
        val javaFile = JavaFile.builder(tableInfo.getBkClass().packageName(), typeSpec)
            .indent(StrConstant.INDENT)
            .build()
        return FileContent(fileName, javaFile.toString())
    }

}
