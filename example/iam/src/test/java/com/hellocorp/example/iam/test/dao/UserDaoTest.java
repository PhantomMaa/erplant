package com.hellocorp.example.iam.test.dao;

import com.hellocorp.example.iam.IamApplication;
import com.hellocorp.example.iam.infra.persist.dao.UserDAO;
import com.hellocorp.example.iam.infra.persist.dataobject.UserDO;
import jakarta.annotation.Resource;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * auto generated by erplant.
 */
@SpringBootTest(
        classes = IamApplication.class
)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class UserDaoTest {
    private static Long id;

    @Resource
    private UserDAO userDAO;

    private final String email = "eca";

    @Test
    @Order(1)
    public void testInsert() {
        UserDO userDO = new UserDO();
        userDO.setEmail(email);
        userDO.setPasswd("fhi");
        int affectRow = userDAO.insert(userDO);
        Assertions.assertTrue(affectRow > 0);
        id = userDO.getId();
    }

    @Test
    @Order(2)
    public void testGet() {
        UserDO userDO = userDAO.get(id);
        Assertions.assertNotNull(userDO);
    }

    @Test
    @Order(3)
    public void testUpdate() {
        UserDO userDO = userDAO.get(id);
        userDO.setEmail(email);
        userDO.setPasswd("fhi");
        int affectRow = userDAO.update(userDO);
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(4)
    public void testDelete() {
        UserDO userDO = userDAO.get(id);
        int affectRow = userDAO.delete(userDO.getId());
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(2)
    public void testBatchGet() {
        UserDO userDO = userDAO.get(id);
        List<UserDO> list = userDAO.batchGet(List.of(userDO.getId()));
        Assertions.assertFalse(list.isEmpty());
    }

    @Test
    @Order(2)
    public void testGetByEmail() {
        UserDO userDO = userDAO.getByEmail(email);
        Assertions.assertNotNull(userDO);
    }
}
