package com.hellocorp.example.iam.test.dao;

import com.hellocorp.example.iam.IamApplication;
import com.hellocorp.example.iam.infra.persist.bk.PermissionBK;
import com.hellocorp.example.iam.infra.persist.dao.PermissionDAO;
import com.hellocorp.example.iam.infra.persist.dataobject.PermissionDO;
import com.hellocorp.example.iam.infra.persist.query.PermissionOffsetQuery;
import com.hellocorp.example.iam.infra.persist.query.PermissionPageNumQuery;
import jakarta.annotation.Resource;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * auto generated by erplant.
 */
@SpringBootTest(
        classes = IamApplication.class
)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class PermissionDaoTest {
    @Resource
    private PermissionDAO permissionDAO;

    private final String name = "hah";

    private final String bizType = "hgd";

    @Test
    @Order(1)
    public void testInsert() {
        PermissionDO permissionDO = new PermissionDO();
        permissionDO.setName(name);
        permissionDO.setBizType(bizType);
        int affectRow = permissionDAO.insert(permissionDO);
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(2)
    public void testGet() {
        PermissionDO permissionDO = permissionDAO.getByBk(new PermissionBK(bizType, name));
        Assertions.assertNotNull(permissionDO);
    }

    @Test
    @Order(2)
    public void testGetByBk() {
        PermissionDO permissionDO = permissionDAO.getByBk(new PermissionBK(bizType, name));
        Assertions.assertNotNull(permissionDO);
    }

    @Test
    @Order(2)
    public void testPageNumQuery() {
        PermissionPageNumQuery query = PermissionPageNumQuery.builder().bizType(bizType).build();
        List<PermissionDO> list = permissionDAO.pageNumQuery(query);
        Assertions.assertFalse(list.isEmpty());
    }

    @Test
    @Order(2)
    public void testOffsetQuery() {
        PermissionOffsetQuery query = PermissionOffsetQuery.builder().bizType(bizType).build();
        List<PermissionDO> list = permissionDAO.offsetQuery(query);
        Assertions.assertFalse(list.isEmpty());
    }

    @Test
    @Order(2)
    public void testCount() {
        PermissionPageNumQuery query = PermissionPageNumQuery.builder().bizType(bizType).build();
        int count = permissionDAO.count(query);
        Assertions.assertTrue(count > 0);
    }

    @Test
    @Order(3)
    public void testUpdate() {
        PermissionDO permissionDO = permissionDAO.getByBk(new PermissionBK(bizType, name));
        permissionDO.setName(name);
        permissionDO.setBizType(bizType);
        int affectRow = permissionDAO.update(permissionDO);
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(4)
    public void testDelete() {
        PermissionDO permissionDO = permissionDAO.getByBk(new PermissionBK(bizType, name));
        int affectRow = permissionDAO.delete(permissionDO.getId());
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(2)
    public void testBatchGet() {
        PermissionDO permissionDO = permissionDAO.getByBk(new PermissionBK(bizType, name));
        List<PermissionDO> list = permissionDAO.batchGet(List.of(permissionDO.getId()));
        Assertions.assertFalse(list.isEmpty());
    }
}
