package com.hellocorp.example.iam.test.dao;

import com.hellocorp.example.iam.IamApplication;
import com.hellocorp.example.iam.infra.persist.bk.RolePermissionRelBK;
import com.hellocorp.example.iam.infra.persist.dao.RolePermissionRelDAO;
import com.hellocorp.example.iam.infra.persist.dataobject.RolePermissionRelDO;
import com.hellocorp.example.iam.infra.persist.query.RolePermissionRelOffsetQuery;
import com.hellocorp.example.iam.infra.persist.query.RolePermissionRelPageNumQuery;
import jakarta.annotation.Resource;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * auto generated by erplant.
 */
@SpringBootTest(
        classes = IamApplication.class
)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class RolePermissionRelDaoTest {
    @Resource
    private RolePermissionRelDAO rolePermissionRelDAO;

    private final Long roleId = 99L;

    private final Long permissionId = 74L;

    private final String bizType = "hgd";

    @Test
    @Order(1)
    public void testInsert() {
        RolePermissionRelDO rolePermissionRelDO = new RolePermissionRelDO();
        rolePermissionRelDO.setRoleId(roleId);
        rolePermissionRelDO.setPermissionId(permissionId);
        rolePermissionRelDO.setBizType(bizType);
        int affectRow = rolePermissionRelDAO.insert(rolePermissionRelDO);
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(2)
    public void testGet() {
        RolePermissionRelDO rolePermissionRelDO = rolePermissionRelDAO.getByBk(new RolePermissionRelBK(bizType, roleId, permissionId));
        Assertions.assertNotNull(rolePermissionRelDO);
    }

    @Test
    @Order(2)
    public void testGetByBk() {
        RolePermissionRelDO rolePermissionRelDO = rolePermissionRelDAO.getByBk(new RolePermissionRelBK(bizType, roleId, permissionId));
        Assertions.assertNotNull(rolePermissionRelDO);
    }

    @Test
    @Order(2)
    public void testPageNumQuery() {
        RolePermissionRelPageNumQuery query = RolePermissionRelPageNumQuery.builder().bizType(bizType).roleId(roleId).build();
        List<RolePermissionRelDO> list = rolePermissionRelDAO.pageNumQuery(query);
        Assertions.assertFalse(list.isEmpty());
    }

    @Test
    @Order(2)
    public void testOffsetQuery() {
        RolePermissionRelOffsetQuery query = RolePermissionRelOffsetQuery.builder().bizType(bizType).roleId(roleId).build();
        List<RolePermissionRelDO> list = rolePermissionRelDAO.offsetQuery(query);
        Assertions.assertFalse(list.isEmpty());
    }

    @Test
    @Order(2)
    public void testCount() {
        RolePermissionRelPageNumQuery query = RolePermissionRelPageNumQuery.builder().bizType(bizType).roleId(roleId).build();
        int count = rolePermissionRelDAO.count(query);
        Assertions.assertTrue(count > 0);
    }

    @Test
    @Order(3)
    public void testUpdate() {
        RolePermissionRelDO rolePermissionRelDO = rolePermissionRelDAO.getByBk(new RolePermissionRelBK(bizType, roleId, permissionId));
        rolePermissionRelDO.setRoleId(roleId);
        rolePermissionRelDO.setPermissionId(permissionId);
        rolePermissionRelDO.setBizType(bizType);
        int affectRow = rolePermissionRelDAO.update(rolePermissionRelDO);
        Assertions.assertTrue(affectRow > 0);
    }

    @Test
    @Order(4)
    public void testDelete() {
        RolePermissionRelDO rolePermissionRelDO = rolePermissionRelDAO.getByBk(new RolePermissionRelBK(bizType, roleId, permissionId));
        int affectRow = rolePermissionRelDAO.delete(rolePermissionRelDO.getId());
        Assertions.assertTrue(affectRow > 0);
    }
}
